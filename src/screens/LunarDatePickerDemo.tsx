import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
} from 'react-native';

// Import modules
import {COLORS, DEMO_BUTTONS} from '../constants';
import {useLunarDatePicker} from '../hooks';
import {DemoButton, CodeBlock} from '../components';

const LunarDatePickerDemo: React.FC = () => {
  const {
    currentConfig,
    pickDate,
    formatDateRange,
    isInitialized,
  } = useLunarDatePicker();

  const codeExample = `import { configure, pickDate, updatePrices } from '@datacomvn/lunar-date-picker';

// C·∫•u h√¨nh picker
configure({
  languages: {
    vi: {
      monthNames: ['Th√°ng 1', 'Th√°ng 2', ...],
      weekdayNames: ['T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'CN'],
    },
  },
  themes: {
    light: {
      backgroundColor: '#ffffff',
      selectedBackgroundColor: '#3B82F6',
      // ... other theme properties
    },
  },
});

// Hi·ªÉn th·ªã picker
pickDate({
  title: 'Ch·ªçn ng√†y',
  mode: 'range',
  prices: [
    { date: '2024-01-01', price: 1000000 },
    { date: '2024-01-02', price: 1200000 },
  ],
  onDone: (result) => {
    console.log('Selected:', result);
  },
});`;

  const features = [
    '‚Ä¢ Ch·ªçn ng√†y ƒë∆°n ho·∫∑c kho·∫£ng ng√†y',
    '‚Ä¢ Hi·ªÉn th·ªã √¢m l·ªãch',
    '‚Ä¢ Hi·ªÉn th·ªã gi√° cho t·ª´ng ng√†y',
    '‚Ä¢ Lazy loading d·ªØ li·ªáu theo th√°ng',
    '‚Ä¢ C·∫≠p nh·∫≠t gi√° ƒë·ªông',
    '‚Ä¢ H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ',
  ];

  if (!isInitialized) {
    return (
      <View style={[styles.container, styles.loadingContainer]}>
        <Text style={styles.loadingText}>ƒêang kh·ªüi t·∫°o picker...</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.content}>
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üìÖ Lunar Date Picker Demo</Text>
        <Text style={styles.description}>
          Th∆∞ vi·ªán ch·ªçn ng√†y √¢m l·ªãch v·ªõi kh·∫£ nƒÉng hi·ªÉn th·ªã gi√° c·∫£ cho t·ª´ng ng√†y.
        </Text>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionSubtitle}>Ng√†y ƒë√£ ch·ªçn:</Text>
        <View style={styles.resultContainer}>
          <Text style={styles.resultText}>{formatDateRange()}</Text>
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionSubtitle}>C√°c lo·∫°i picker:</Text>
        {DEMO_BUTTONS.map((button, index) => (
          <DemoButton
            key={index}
            title={button.title}
            description={button.description}
            color={button.color}
            onPress={() => pickDate(button.config)}
            isSelected={currentConfig === button.config}
          />
        ))}
      </View>

      <View style={styles.section}>
        <CodeBlock title="C√°ch s·ª≠ d·ª•ng:" code={codeExample} />
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionSubtitle}>T√≠nh nƒÉng ch√≠nh:</Text>
        <View style={styles.featureList}>
          {features.map((feature, index) => (
            <Text key={index} style={styles.featureItem}>{feature}</Text>
          ))}
        </View>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.BACKGROUND,
  },
  content: {
    padding: 20,
  },
  loadingContainer: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: COLORS.GRAY.MEDIUM,
  },
  section: {
    marginBottom: 30,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: COLORS.GRAY.DARK,
    marginBottom: 10,
  },
  sectionSubtitle: {
    fontSize: 18,
    fontWeight: '600',
    color: COLORS.GRAY.DARK,
    marginBottom: 12,
  },
  description: {
    fontSize: 16,
    color: COLORS.GRAY.MEDIUM,
    lineHeight: 24,
  },
  resultContainer: {
    backgroundColor: '#e3f2fd',
    padding: 20,
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: COLORS.PRIMARY,
    alignItems: 'center',
  },
  resultText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1976d2',
  },
  featureList: {
    backgroundColor: COLORS.WHITE,
    padding: 20,
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: COLORS.SUCCESS,
  },
  featureItem: {
    fontSize: 14,
    color: COLORS.GRAY.DARK,
    marginBottom: 8,
    lineHeight: 20,
  },
});

export default LunarDatePickerDemo; 